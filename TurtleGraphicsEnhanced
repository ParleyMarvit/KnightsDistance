import turtle

def make_board(num_rows, num_columns):
    board = []
    for i in range(num_rows):
        board.append([])
        for j in range(num_columns):
            board[i].append(' ')
    return board

def get_legal_moves(board, position):
    legal_moves = []
    for row in range(len(board)):
        for col in range(len(board[row])):
            if (abs(row - position[0]) + abs(col - position[1]) == 3 
                and abs(row - position[0]) < 3 and abs(col - position[1]) < 3 
                and -1 not in [row, col] and len(board) not in [row, col]
                and board[row][col] == ' '):
                legal_moves.append([row, col])
    return legal_moves

def run(board, positions, num):
    if ' ' not in sum(board, []):
        return
    legal_moves = []
    for position in positions:
        legal_moves += get_legal_moves(board, position)
    for position in legal_moves:
        board[position[0]][position[1]] = num
    run(board, legal_moves, str(int(num) + 1))

def draw_square(turtle_name):
    turtle_name.begin_fill()
    for i in range(4):
        turtle_name.forward(50)
        turtle_name.right(90)
    turtle_name.end_fill()

def draw_row(num_columns, turtle_name):
    for i in range(num_columns):
        draw_square(turtle_name)
        turtle_name.forward(50)

def draw_board(num_columns, num_rows, x, y, turtle_name):
    for i in range(num_rows):
        turtle_name.penup()
        turtle_name.setposition(x, y - 50 * i)
        turtle_name.pendown()
        draw_row(num_columns, turtle_name)

def make_piece():
    piece = turtle.Turtle()
    piece.shape('circle')
    piece.shapesize(2, 2)
    piece.speed(0)
    return piece

def initialize_board(board, length):
    for i in range(len(board)):
        for j in range(len(board[i])):
            board[i][j] = make_piece()
            board[i][j].penup()
            board[i][j].setposition((length - 1) * -25 + j * 50,
                                    (length - 1) * 25 - i * 50)

length = 15
board = make_board(length, length)
position = [length // 2, length // 2]
board[position[0]][position[1]] = '0'
run(board, [position], '1')

screen = turtle.getscreen()
screen.setup(1000, 1000)
screen.title('Knight Distance')
screen.tracer(0)

knight = turtle.Turtle()
knight.hideturtle()
knight.color('black', 'dim gray')
knight.width(3)
draw_board(length, length, length * -25, length * 25, knight)

turtle_board = make_board(length, length)
initialize_board(turtle_board, length)

colors = ['red', 'gold', 'lime', 'cyan', 'deep pink', 'medium purple',
          'royal blue', 'sea green', 'navy', 'black']
for i in range(len(board)):
    for j in range(len(board[i])):
        turtle_board[i][j].color(colors[int(board[i][j])])

color_text = ' ' * 13
for i in range(len(colors)):
    color_text += colors[i] + ' = ' + str(i)
    if i < len(colors) - 1:
        color_text += '; '
    if i == 4:
        color_text += '\n'

knight.penup()
knight.setposition(0, (length - 3) * -25 + j * 50)
knight.write(color_text, font = ('Futura', 25), align = 'center')
screen.update()
